Функция ВыполнитьПриложение(ПараметрыПроцедуры, IDСообщения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(IDСообщения) Тогда
		
		// это сделано для отправки сообщения вручную из очереди...
		ОбработатьОбработанное = Ложь;
		ПростаяПередачаПараметров = Ложь;
		wsОбработчики.ОбработатьСообщение(IDСообщения, ОбработатьОбработанное, ПростаяПередачаПараметров);
		Возврат Неопределено;		
	
	КонецЕсли; 
	
	Если ПараметрыПроцедуры.Свойство("Ссылка") И ПараметрыПроцедуры.Свойство("ТипСообщения") Тогда
		
		// запись преварительного сообщения в очередь (только ссылка), запуск обработки...
		
		ID = Неопределено;
		
		wsОбработчики.ЗаписатьСообщениеВОчередьСообщений(
				"Отправка не выполнялась",
					ПараметрыПроцедуры.ТипСообщения, 
						Перечисления.wsНаправлениеСообщения.Исходящее,ID,
							ПараметрыПроцедуры.Ссылка, Ложь); // не обработано
		
		// запускаем обработку...
		ПростаяПередачаПараметров = Ложь;
		ВключаяОбработанное = Ложь;
		wsОбработчики.ОбработатьСообщение(ID, ВключаяОбработанное, ПростаяПередачаПараметров);
		
	ИначеЕсли ПараметрыПроцедуры.Свойство("ПростаяПередачаПараметров")	Тогда 
		
		Если НЕ ПараметрыПроцедуры.Обработано Тогда
			
			// обработка 
			СформироватьИОтправитьСообщение(ПараметрыПроцедуры);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

Процедура СформироватьИОтправитьСообщение(ПараметрыПроцедуры)
	
	// Вот это надо отправить без всякого xsd
	// Текст = "Параметры: ordering " + ordering+", position "+ position+", production "+ production+", material "+ material+", text "
	// + text+", position "+ number+", number "+ steel+", blending "+ blending+", normative "+ normative+", item "+ item
	// +", manufactory "+ manufactory+", customer "+ customer+", customer_name "+ customer_name+", date "+ date+", status "+ status+", "+ datestart+", "+numberKAZ;

	// Документ «ЭтапПроизводства2_2»  		
	// Распоряжение.ДокументОснование.Номер	ordering
	
	// Распоряжение.Номер	position ??? тип - номер, а здесь строка	
	
	// Номер	production	
	
	// ПартияПроизводства.ОсновноеИзделиеНоменклатура.Код	material	
	// ПартияПроизводства.ОсновноеИзделиеНоменклатура	text	
	
	// КоличествоУпаковокПлан	number	 
	
	// ПартияПроизводства.ОсновноеИзделиеНоменклатура.АЭМ_МаркаСтали	steel	* См. примечание.
	// ПартияПроизводства.ОсновноеИзделиеНоменклатура.АЭМ_Шихтовка	blending	* См. примечание.
	
	// normative	Не передается
	
	// Распоряжение.Продукция.Номенклатура	item	Номенклатура берется из первой строки табличной части «Продукция» ???? 
	
	// ТЧ.ВыходныеИзделия.Назначение	manufactory	
	// 	 Назначение берется из Назначение.Заказ.Подразделение первой строки табличной части «ВыходныеИзделия»
	
	// Распоряжение.ДатаПотребности	data	
	// Статус	status	Статус документа «Этап производства». Передаются статусы «Сформирован», «Завершен». При пометке документа «Этап производства» передается статус «Завершен»
	// Дата	datestart	
	// numberKAZ	Из документа «Карта анализа запроса» выбирается значение поля «КАЗ»
	// ПлановаяДатаНачалаЭтапа	datebazis_start	
	// ПлановаяДатаОкончанияЭтапа	datebazis_end	
	// incomponent	Входящий компонент
	// (для вида номенклатуры  «S-2 Слиток» – это S-1, для вида номенклатуры «S-1 Жидкая сталь» данное значение будет пустым).
	//					
	
	S2 = АЭМ_ГлобальныеЗначенияПовтИсп.S2();    
	Если НЕ ЗначениеЗаполнено(S2) Тогда
		Сообщить("Не заполнено глобальное значение S2");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("S2", АЭМ_ГлобальныеЗначенияПовтИсп.S2());    
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПроцедуры.СсылкаНаОбъект);    
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Начат", Перечисления.СтатусыЭтаповПроизводства2_2.Начат);       // деблокирован
	Запрос.УстановитьПараметр("Формируется", Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	Запрос.УстановитьПараметр("Сформирован", Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован); // открыт
	Запрос.УстановитьПараметр("КВыполнению", Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	Запрос.УстановитьПараметр("Завершен", Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);    // закрыт
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭтапПроизводства2_2.Дата КАК datestart,
		|	ЭтапПроизводства2_2.Распоряжение.Номер КАК position,
		|	ЭтапПроизводства2_2.Распоряжение.ДокументОснование КАК ДокументОснование,
		|	ЭтапПроизводства2_2.Номер КАК production,
		|	ОснИздПартии.Артикул КАК material,
		|	ОснИздПартии.Наименование КАК text,
		|	ПРЕДСТАВЛЕНИЕ(ОснИздПартии.АЭМ_МаркаСтали) КАК steel,
		|	ЭтапПроизводства2_2.КоличествоУпаковокПлан КАК number,
		|	ПРЕДСТАВЛЕНИЕ(ОснИздПартии.АЭМ_Шихтовка) КАК blending,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказНаПроизводствоПродукция.Номенклатура) КАК item,
		|	ПРЕДСТАВЛЕНИЕ(ЭтапПроизводства2_2ВыходныеИзделия.Назначение) КАК manufactory,
		|	ЗаказНаПроизводствоПродукция.ДатаПотребности КАК date,
		|	ВЫБОР
		|		КОГДА ЭтапПроизводства2_2.ПометкаУдаления
		|			ТОГДА ""I0046""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЭтапПроизводства2_2.Статус = &Начат
		|					ТОГДА ""I0002""
		|				КОГДА ЭтапПроизводства2_2.Статус = &Сформирован
		|					ТОГДА ""I0001""
		|				КОГДА ЭтапПроизводства2_2.Статус = &Завершен
		|					ТОГДА ""I0046""
		|			КОНЕЦ
		|	КОНЕЦ КАК status,
		|	ЭтапПроизводства2_2.АЭМ_ПлановаяДатаНачалаЭтапа КАК datebazis_start,
		|	ЭтапПроизводства2_2.АЭМ_ПлановаяДатаОкончанияЭтапа КАК datebazis_end,
		|	ВЫБОР
		|		КОГДА НоменклатураОбеспечения.ВидНоменклатуры = &S2
		|			ТОГДА ""S-1""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК incomponent
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК ПартииПроизводства
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОснИздПартии
		|			ПО ПартииПроизводства.ОсновноеИзделиеНоменклатура = ОснИздПартии.Ссылка
		|		ПО ЭтапПроизводства2_2.ПартияПроизводства = ПартииПроизводства.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
		|		ПО ЭтапПроизводства2_2.Распоряжение = ЗаказНаПроизводствоПродукция.Ссылка
		|			И (ЗаказНаПроизводствоПродукция.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ЭтапПроизводства2_2ВыходныеИзделия
		|		ПО (ЭтапПроизводства2_2ВыходныеИзделия.Ссылка = ЭтапПроизводства2_2.Ссылка)
		|			И (ЭтапПроизводства2_2ВыходныеИзделия.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами
		|		ПО (ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Ссылка = ЭтапПроизводства2_2.Ссылка)
		|			И (ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.НомерСтроки = 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураОбеспечения
		|		ПО (ЭтапПроизводства2_2ОбеспечениеМатериаламиИРаботами.Номенклатура = НоменклатураОбеспечения.Ссылка)
		|ГДЕ
		|	ЭтапПроизводства2_2.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаЭтап = РезультатЗапроса.Выбрать();
	ВыборкаЭтап.Следующий();
	
	//	ЭтапПроизводства2_2.Распоряжение.ДокументОснование.Номер КАК ordering,
	
	// 5.11.1.1.	Распоряжение.ДокументОснование. Партнер.Код
	// 5.11.1.2.	Распоряжение.ДокументОснование. АЭМ_ФилиалЗаказчик.Код	customer	
	//					п.1 – если документ «Заказ на производство» создан на основании документов «Заказ клиента» и «Заказ давальца»
	
	//	п.2 - если документ «Заказ на производство» создан на основании документа «Заказ на внутреннее потребление». 
	//		1.	Распоряжение.ДокументОснование.Партнер.Наименование
	//		2.	Распоряжение.ДокументОснование.АЭМ_ФилиалЗаказчик.Наименование	customer_name	
	//					п.1 – если документ «Заказ на производство» создан на основании документов «Заказ клиента» и «Заказ давальца»
	//			п.2 - если документ «Заказ на производство» создан на основании документа «Заказ на внутреннее потребление».
	
	
	Если ТипЗнч(ВыборкаЭтап.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Номер КАК ordering,
		|	ЗаказКлиента.Партнер.Код КАК customer,
		|	ЗаказКлиента.Партнер.Наименование КАК customer_name,
		|	ЗаказКлиентаТовары.АЭМ_КартаАнализаЗапроса.КАЗ КАК numberKAZ
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ПО (ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка)
		|			И (ЗаказКлиентаТовары.НомерСтроки = 1)
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаЭтап.ДокументОснование);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаОснование = РезультатЗапроса.Выбрать();
		ВыборкаОснование.Следующий();
		
	ИначеЕсли ТипЗнч(ВыборкаЭтап.ДокументОснование) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказДавальца.Номер КАК ordering,
		|	ЗаказДавальца.Партнер.Код КАК customer,
		|	ЗаказДавальца.Партнер.Наименование КАК customer_name,
		|	NULL КАК numberKAZ
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
		|		ПО ЗаказДавальца.Ссылка = ЗаказДавальцаПродукция.Ссылка
		|			И (ЗаказДавальцаПродукция.НомерСтроки = 1)
		|ГДЕ
		|	ЗаказДавальца.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаЭтап.ДокументОснование);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаОснование = РезультатЗапроса.Выбрать();
		ВыборкаОснование.Следующий();
		
		
	ИначеЕсли ТипЗнч(ВыборкаЭтап.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")  Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаВнутреннееПотребление.Номер КАК ordering,
		|	ЗаказНаВнутреннееПотребление.АЭМ_ФилиалЗаказчик.Код КАК customer,
		|	ЗаказНаВнутреннееПотребление.АЭМ_ФилиалЗаказчик.Наименование КАК customer_name,
		|	ЗаказНаВнутреннееПотреблениеТовары.АЭМ_КартаАнализаЗапроса.КАЗ КАК numberKAZ
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
		|		ПО ЗаказНаВнутреннееПотребление.Ссылка = ЗаказНаВнутреннееПотреблениеТовары.Ссылка
		|			И (ЗаказНаВнутреннееПотреблениеТовары.НомерСтроки = 1)
		|ГДЕ
		|	ЗаказНаВнутреннееПотребление.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаЭтап.ДокументОснование);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаОснование = РезультатЗапроса.Выбрать();
		ВыборкаОснование.Следующий();
		
	КонецЕсли; 

	ОтправитьСообщение(ВыборкаЭтап, ВыборкаОснование, ПараметрыПроцедуры);	
	
КонецПроцедуры

Процедура ОтправитьСообщение(ВыборкаЭтап, ВыборкаОснование, ПараметрыПроцедуры, Отказ = Ложь)
	
	
	wsНастройкиВебСервисов =  wsОбработчики.ОписаниеВебСервиса(ПараметрыПроцедуры.ТипСообщения);
	
	// Подключение
	Определения = Новый WSОпределения(wsНастройкиВебСервисов.МестоположениеWSDL, 
							wsНастройкиВебСервисов.ИмяПользователя, wsНастройкиВебСервисов.Пароль);
							
							
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");							
	position = ОписаниеТипаЧисло.ПривестиЗначение(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЭтап.position));							
	number = ОписаниеТипаЧисло.ПривестиЗначение(ВыборкаЭтап.number);							
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");							
	date = ОписаниеТипаДата.ПривестиЗначение(ВыборкаЭтап.date);							
	datebazis_start = ОписаниеТипаДата.ПривестиЗначение(ВыборкаЭтап.datebazis_start);							
	datebazis_end = ОписаниеТипаДата.ПривестиЗначение(datebazis_end);							
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
									wsНастройкиВебСервисов.URIПространстваИмен, 
											wsНастройкиВебСервисов.ИмяWEBСервиса, 
													wsНастройкиВебСервисов.ИмяТочкиПодключения,,60);
		Прокси.Пользователь = wsНастройкиВебСервисов.ИмяПользователя;
		Прокси.Пароль = wsНастройкиВебСервисов.Пароль;
		
		// ordering = "", position= "", production = "", 
		// material= "", text= "", number= "", steel= "", blending= "", 
		// normative = "", item= "", manufactory= "", 
		// customer= "",customer_name= "", date= "", status= "",
		// datestart = "",numberKAZ ="",datebazis_start="",datebazis_end ="",incomponent=""
		
		Результат = Прокси.PutOrders(
			XMLСтрока(ВыборкаОснование.ordering),
			Формат(position,"ЧГ=0"),  // integer
			XMLСтрока(ВыборкаЭтап.production),
			XMLСтрока(ВыборкаЭтап.material),
			XMLСтрока(ВыборкаЭтап.text),
			Формат(number,"ЧГ=0"), // integer
			XMLСтрока(ВыборкаЭтап.steel),
			XMLСтрока(ВыборкаЭтап.blending),
			"",
			XMLСтрока(ВыборкаЭтап.item),
			XMLСтрока(ВыборкаЭтап.manufactory),
			XMLСтрока(ВыборкаОснование.customer),
			XMLСтрока(ВыборкаОснование.customer_name),
			date,
			XMLСтрока(ВыборкаЭтап.status),
			ВыборкаЭтап.datestart,
			XMLСтрока(ВыборкаОснование.numberKAZ),
			datebazis_start,
			datebazis_end,
			XMLСтрока(ВыборкаЭтап.incomponent)
		); 
		
		Если Результат Тогда
			Сообщить("Готово.");
		Иначе
			Сообщить("Ошибка на стороне приемника.");
		КонецЕсли; 
		
	Исключение
		Отказ = Истина;
		Сообщить("Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
	Текст = 
	"ordering " +  XMLСтрока(ВыборкаОснование.ordering) + Символы.ПС
	+ "position " + 		position + Символы.ПС  // integer
	+ "production " + 		XMLСтрока(ВыборкаЭтап.production) + Символы.ПС
	+ "material " + 		XMLСтрока(ВыборкаЭтап.material) + Символы.ПС
	+ "text " + 		XMLСтрока(ВыборкаЭтап.text) + Символы.ПС
	+ "number " + 		number + Символы.ПС // integer
	+ "steel " + 		XMLСтрока(ВыборкаЭтап.steel) + Символы.ПС
	+ "blending " + 		XMLСтрока(ВыборкаЭтап.blending) + Символы.ПС
	+ "normative " + "" + Символы.ПС
	+ "item " + 		XMLСтрока(ВыборкаЭтап.item) + Символы.ПС
	+ "manufactory " + 		XMLСтрока(ВыборкаЭтап.manufactory) + Символы.ПС
	+ "customer " + 		XMLСтрока(ВыборкаОснование.customer) + Символы.ПС
	+ "customer_name " + 		XMLСтрока(ВыборкаОснование.customer_name) + Символы.ПС
	+ "date " + 		date + Символы.ПС
	+ "status " + 		XMLСтрока(ВыборкаЭтап.status) + Символы.ПС
	+ "datestart " + 		ВыборкаЭтап.datestart + Символы.ПС
	+ "numberKAZ " + 		XMLСтрока(ВыборкаОснование.numberKAZ) + Символы.ПС
	+ "datebazis_start " + datebazis_start + Символы.ПС
	+ "datebazis_end " +datebazis_end + Символы.ПС
	+ "incomponent " + XMLСтрока(ВыборкаЭтап.incomponent);
	
	Если Не Отказ Тогда

		Попытка
			
			// Обновляем сообщение в регистре
			wsОбработчики.ЗаписатьСообщениеВОчередьСообщений(
				Текст, 
					ПараметрыПроцедуры.ТипСообщения, 
						Перечисления.wsНаправлениеСообщения.Исходящее,
							ПараметрыПроцедуры.IDСообщения,
								ПараметрыПроцедуры.СсылкаНаОбъект, 
									Истина, // обработано
										ПараметрыПроцедуры.Дата); 
		Исключение
			
			Сообщить("Ошибка: " + ОписаниеОшибки());
			
		КонецПопытки; 
	
	КонецЕсли; 
	

КонецПроцедуры
 
 