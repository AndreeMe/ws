Процедура ЗаписатьСообщениеВОчередьСообщений(ТипСообщения, Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.wsОчередьВходящихСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Дата = ТекущаяДата();
	МенеджерЗаписи.ТипСообщения  = ТипСообщения;
	МенеджерЗаписи.Сообщение = Сообщение;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


Процедура ОбработкаОчередиСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очередь.Дата КАК Дата,
	|	Очередь.ТипСообщения КАК ТипСообщения,
	|	Очередь.Сообщение КАК Сообщение
	|ИЗ
	|	РегистрСведений.wsОчередьВходящихСообщений КАК Очередь
	|ГДЕ
	|	НЕ Очередь.Обработано
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СообщениеОбОшибке = ОбработатьСообщение(ВыборкаДетальныеЗаписи.ТипСообщения, ВыборкаДетальныеЗаписи.Сообщение); 
		
		НаборЗаписей = РегистрыСведений.wsОчередьВходящихСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(ВыборкаДетальныеЗаписи.Дата);
		НаборЗаписей.Отбор.ТипСообщения.Установить(ВыборкаДетальныеЗаписи.ТипСообщения);
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Обработано = Истина;
			Запись.СообщениеОбОшибке = СообщениеОбОшибке;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// можно вызывать функцию для отладки приема сообщения 
Функция ОбработатьСообщение(ТипСообщения, Сообщение) Экспорт
	
	Приложение = wsОбработчики.ПодключитьОбработку(ТипСообщения);
	Возврат Приложение.ВыполнитьПриложение(Сообщение);

КонецФункции // ()


#Область Служебные
Функция ПолучитьИмяФайлаОбработки(ИмяОбработки, КаталогОбработки = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КаталогОбработки) Тогда
		КаталогОбработки = КаталогВременныхФайлов();
	КонецЕсли;
	ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки);
	Возврат КаталогОбработки + ИмяОбработки + ".epf";
КонецФункции
	
Функция ПодключитьОбработку(ТипСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	wsОбработки.Отладка КАК Отладка,
		|	wsОбработки.КаталогОтладки КАК КаталогОтладки,
		|	wsОбработки.ХранилищеОбработки КАК ХранилищеОбработки,
		|	wsОбработки.ИмяОбработки КАК ИмяОбработки
		|ИЗ
		|	РегистрСведений.wsОбработки КАК wsОбработки
		|ГДЕ
		|	wsОбработки.ТипСообщения = &ТипСообщения";
	
	Запрос.УстановитьПараметр("ТипСообщения", ТипСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Если ВыборкаДетальныеЗаписи.Отладка Тогда
		Возврат ПолучитьОбработкуДляОтладки(ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.КаталогОтладки);
	Иначе 
		Возврат ПолучитьОбработку(ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.ХранилищеОбработки);			
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбработку(Знач ИмяОбработки, Знач ХранилищеОбработки = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяОбработки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
	
	Если БезопасныйРежим() Тогда
		УстановитьБезопасныйРежим(Ложь);
		БылБезопасныйРежим = Истина;
	Иначе
		БылБезопасныйРежим = Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаОбработки);
	
	Если Не Файл.Существует() Тогда
		Если НЕ ИзвлечьИзРепозитория(ИмяОбработки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Попытка
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	//@skip-warning
	Если БылБезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбработкуДляОтладки(Знач ИмяОбработки, Знач КаталогОтладки)	
	Если Не ЗначениеЗаполнено(ИмяОбработки) или Не ЗначениеЗаполнено(КаталогОтладки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки, КаталогОтладки);
	Если ИмяФайлаОбработки = Неопределено Тогда
		wsЛоги.СообщитьОбОшибке("Что-то пошло не так");
		Возврат Неопределено
	КонецЕсли;
	Попытка
		Файл = Новый Файл(ИмяФайлаОбработки);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
		Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;		
КонецФункции

Процедура ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки)
	КаталогОбработки = СтрЗаменить(КаталогОбработки, "/", "\");
	Если Не Прав(КаталогОбработки, 1) = "\" Тогда
		КаталогОбработки = КаталогОбработки + "\";
	КонецЕсли;
	Если Не Прав(НРег(ИмяОбработки), 4) = ".epf" Тогда
		ИмяОбработки = СтрЗаменить(ИмяОбработки, ".epf","");
	КонецЕсли;
КонецПроцедуры

Функция ИзвлечьИзРепозитория(ИмяОбработки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	wsОбработки.ХранилищеОбработки КАК ХранилищеОбработки
	|ИЗ
	|	РегистрСведений.wsОбработки КАК wsОбработки
	|ГДЕ
	|	wsОбработки.ИмяОбработки = &ИмяОбработки";
	Запрос.УстановитьПараметр("ИмяОбработки", ИмяОбработки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Попытка
			ДвоичныеДанные = Выборка.ХранилищеОбработки.Получить();
			СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки);
		Исключение
			wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Истина;
КонецФункции

Функция СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки)
	Если Не ДвоичныеДанные = Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
		ДвоичныеДанные.Записать(ИмяФайлаОбработки);
		Возврат Истина;
	Иначе
		ВызватьИсключение "Данные обработчика с именем " + ИмяОбработки + " отсутствуют в хранилище";	
	КонецЕсли;	
КонецФункции


#КонецОбласти
