#Область ПрограммныйИнтерфейс

// Запись сообщений выполняется из подписок на событие:
// - при записи заявки (формируется сообщение о приеме заявки для САП ИТЗ)
// - при записи пропуска (формируеся сообщение о создании пропуска для САП ИТЗ)
// - при записи документа на вывоз (формируеся сообщение о вывозе груза для САП ИТЗ)
Процедура ЗаписатьСообщениеВОчередьСообщений(
		Сообщение, 
			ТипСообщения, 
				Направление, 
					ID = Неопределено, 
						СсылкаНаОбъект = Неопределено,
								Обработано = Ложь, 
									Дата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ТипСообщения) = Тип("Строка") Тогда
		ТипСообщения = Справочники.wsТипыСообщений.НайтиПоНаименованию(ТипСообщения);
	КонецЕсли; 
	
	Если ID = Неопределено Тогда
		ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	СообщениеСтрокой = Неопределено;
	Если ТипЗнч(Сообщение) = Тип("ОбъектXDTO") Тогда
		ЗаписьХМЛ  = Новый ЗаписьXML;
		ЗаписьХМЛ.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, Сообщение);
		СообщениеСтрокой = ЗаписьХМЛ.Закрыть();
	ИначеЕсли ТипЗнч(Сообщение) = Тип("Строка") Тогда
		СообщениеСтрокой = Сообщение;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СообщениеСтрокой) Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерЗаписи = РегистрыСведений.wsОчередьСообщений.СоздатьМенеджерЗаписи();
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли; 
	МенеджерЗаписи.Дата = Дата;
	МенеджерЗаписи.Месяц = НачалоМесяца(МенеджерЗаписи.Дата);
	МенеджерЗаписи.ТипСообщения  = ТипСообщения;
	МенеджерЗаписи.Сообщение = СообщениеСтрокой;
	МенеджерЗаписи.ХранилищеЗначения = Новый ХранилищеЗначения(СообщениеСтрокой);
	МенеджерЗаписи.Направление = Направление;
	МенеджерЗаписи.IDСообщения = ID;
	МенеджерЗаписи.Обработано = Обработано;
	Если Обработано Тогда
		МенеджерЗаписи.ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		// Документ - нав.ссылка или объект базы...
		ТипЗначения = ТипЗнч(СсылкаНаОбъект);
		Если ТипЗначения = Тип("Строка") Тогда
			МенеджерЗаписи.НавигационнаяСсылка = СсылкаНаОбъект;
		Иначе
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			Если Метаданные.Документы.Содержит(ОбъектМетаданных) 
				или Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
				МенеджерЗаписи.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
				МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработка очереди выполняется в фоновых заданиях 
Функция ОбработкаОчередиСообщений(ТолькоID = Неопределено, КромеID = Неопределено, Ответ = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ТолькоID) Тогда
		
		Запрос.УстановитьПараметр("ТолькоID", ТолькоID); 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Очередь.IDСообщения
		|ИЗ
		|	НЕ Очередь.Обработано
		|	И НЕ Очередь.ТипСообщения = ЗНАЧЕНИЕ(Справочник.wsТипыСообщений.ПустаяСсылка)
		|	РегистрСведений.wsОчередьСообщений КАК Очередь
		|ГДЕ
		|	И НЕ Очередь.IDСообщения = &ТолькоID";
		
	Иначе
		
		Если ЗначениеЗаполнено(КромеID) Тогда
			Запрос.УстановитьПараметр("КромеID", КромеID); 
		Иначе		
			Запрос.УстановитьПараметр("КромеID", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")); 
		КонецЕсли; 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Очередь.IDСообщения
		|ИЗ
		|	РегистрСведений.wsОчередьСообщений КАК Очередь
		|ГДЕ
		|	НЕ Очередь.Обработано
		|	И НЕ Очередь.ТипСообщения = ЗНАЧЕНИЕ(Справочник.wsТипыСообщений.ПустаяСсылка)
		|	И НЕ Очередь.IDСообщения = &КромеID";
		
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ответ = ОбработатьСообщение(ВыборкаДетальныеЗаписи.IDСообщения) ;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьСообщениеВФоне(IDСообщения, ВключаяОбработанное = Ложь, ПростаяПередачаПараметров = Истина) Экспорт
	
	ПараметрыФоновогоЗадания = Новый Массив;
	ПараметрыФоновогоЗадания.Добавить(IDСообщения); 
	ПараметрыФоновогоЗадания.Добавить(ВключаяОбработанное); 
	ПараметрыФоновогоЗадания.Добавить(ПростаяПередачаПараметров); 
	ФоновыеЗадания.Выполнить("wsОбработчики.ОбработатьСообщение",
				ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, 
					"Обработать сообщение"); 	
	
КонецФункции

// можно вызывать эту функцию для отладки обработки сообщения 
Функция ОбработатьСообщение(IDСообщения, ОбработатьОбработанное = Ложь, ПростаяПередачаПараметров = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбработатьОбработанное", ОбработатьОбработанное);
	Запрос.УстановитьПараметр("ПростаяПередачаПараметров", ПростаяПередачаПараметров);
	Запрос.УстановитьПараметр("IDСообщения", IDСообщения);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ПростаяПередачаПараметров КАК ПростаяПередачаПараметров,
		|	wsОчередьСообщений.IDСообщения КАК IDСообщения,
		|	wsОчередьСообщений.Дата КАК Дата,
		|	wsОчередьСообщений.Направление КАК Направление,
		|	wsОчередьСообщений.ТипСообщения КАК ТипСообщения,
		|	wsОчередьСообщений.ХранилищеЗначения КАК ХранилищеЗначения,
		|	wsОчередьСообщений.СсылкаНаОбъект КАК СсылкаНаОбъект,
		|	wsОчередьСообщений.НавигационнаяСсылка КАК НавигационнаяСсылка,
		|	wsОчередьСообщений.Обработано КАК Обработано,
		|	wsОчередьСообщений.Сообщение КАК Сообщение
		|ИЗ
		|	РегистрСведений.wsОчередьСообщений КАК wsОчередьСообщений
		|ГДЕ
		|	wsОчередьСообщений.IDСообщения = &IDСообщения
		|	И ВЫБОР
		|			КОГДА &ОбработатьОбработанное
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ wsОчередьСообщений.Обработано
		|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СообщениеОбОшибке = "Не найдена запись " + IDСообщения;
		Документ = Неопределено;
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Приложение = wsОбработчики.ПодключитьОбработку(
					ВыборкаДетальныеЗаписи.ТипСообщения, 
							ВыборкаДетальныеЗаписи.Направление);
							
	Если Приложение = Неопределено Тогда
		СообщениеОбОшибке = "Не найден обработчик";
		Документ = Неопределено;
	Иначе
		Попытка
			
			Если ПростаяПередачаПараметров Тогда
				Результат = Приложение.ВыполнитьПриложение(ВыборкаДетальныеЗаписи.ХранилищеЗначения, IDСообщения);	
			Иначе
				ПараметрыПроцедуры = Новый Структура;
				Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
					ПараметрыПроцедуры.Вставить(Колонка.Имя, ВыборкаДетальныеЗаписи[Колонка.Имя]);
				КонецЦикла;				           		
				Результат = Приложение.ВыполнитьПриложение(ПараметрыПроцедуры);	
			КонецЕсли; 
			
			Если Результат = Неопределено Тогда
				СообщениеОбОшибке = Неопределено;
				Документ = Неопределено;
			ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
				СообщениеОбОшибке = Результат.Сообщение;
				Документ = Результат.Документ;
			КонецЕсли; 
			
		Исключение
			СообщениеОбОшибке = ОписаниеОшибки();		
			Документ = Неопределено;
		КонецПопытки;
	КонецЕсли; 

	НаборЗаписей = РегистрыСведений.wsОчередьСообщений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.IDСообщения.Установить(IDСообщения);
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			Запись.Обработано = Истина;
		КонецЕсли; 
		Запись.СообщениеОбОшибке = СообщениеОбОшибке;
		Запись.ДатаОбработки = ТекущаяДата();
		Если ЗначениеЗаполнено(Документ) Тогда
			// Документ - нав.ссылка или объект базы...
			ТипЗначения = ТипЗнч(Документ);
			Если ТипЗначения = Тип("Строка") Тогда
			    Запись.НавигационнаяСсылка = Документ;	
			Иначе
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Если Метаданные.Документы.Содержит(ОбъектМетаданных) 
					или Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Запись.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
					Запись.СсылкаНаОбъект = Документ;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Возврат СообщениеОбОшибке;
	
КонецФункции // ()

Функция ОписаниеВебСервиса(ТипПодключаемойОбработки, Направление = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипСообщения", ТипПодключаемойОбработки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	wsОбработки.НастройкаВебСервиса КАК НастройкаВебСервиса
	|ИЗ
	|	РегистрСведений.wsОбработки КАК wsОбработки
	|ГДЕ
	|	wsОбработки.ТипСообщения = &ТипСообщения";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = "Не задано описание веб-сервиса для сообщений вида " + ТипПодключаемойОбработки;
		Сообщить(Текст, СтатусСообщения.Важное);
		wsЛоги.СообщитьОбОшибке(Текст);
		Возврат Неопределено;		
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.НастройкаВебСервиса;

КонецФункции // ()

Функция XDTOtoXML(XDTO, врФабрикаXDTO = Неопределено) Экспорт
	
	Если врФабрикаXDTO = Неопределено Тогда
	    врФабрикаXDTO = ФабрикаXDTO;
	КонецЕсли; 

	ЗаписьХМЛ  = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML(); 
	врФабрикаXDTO.ЗаписатьXML(ЗаписьХМЛ, XDTO);
	Возврат ЗаписьХМЛ.Закрыть();

КонецФункции // ()

Функция СтрокаХМЛвДату(СтрокаХМЛ) Экспорт
	Возврат Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаХМЛ,"T",""),"-",""),":","")); 
КонецФункции // ()

Функция СтрокаХМЛвБулево(СтрокаХМЛ) Экспорт
	Если СтрокаХМЛ = "false" Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаХМЛ = "true" Тогда
		Возврат Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ()

Функция ФабрикаXDTOПоТипуСообщения(ТипСообщения) Экспорт
	
	Если ТипЗнч(ТипСообщения) = Тип("Строка") Тогда
		ТипСообщения = Справочники.wsТипыСообщений.НайтиПоНаименованию("Выгрузка КАЗ в ЕРП");
	КонецЕсли;
	
	ДвоичныеДанные = ТипСообщения.СхемаXSD.Получить();
	Если Не ДвоичныеДанные = Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xsd");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		врФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	Иначе
		врФабрикаXDTO = ФабрикаXDTO;
	КонецЕсли; 
	

	Возврат врФабрикаXDTO; 

КонецФункции // ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяФайлаОбработки(Знач  ИмяОбработки, КаталогОбработки = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КаталогОбработки) Тогда
		КаталогОбработки = КаталогВременныхФайлов();
	КонецЕсли;
	ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки);
	Возврат КаталогОбработки + ИмяОбработки + ".epf";
КонецФункции
	
Функция ПодключитьОбработку(ТипСообщения, Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	wsОбработки.Отладка КАК Отладка,
		|	wsОбработки.КаталогОтладки КАК КаталогОтладки,
		|	wsОбработки.ХранилищеОбработки КАК ХранилищеОбработки,
		|	wsОбработки.ИмяОбработки КАК ИмяОбработки,
		|	wsОбработки.ВнутренняяОбработка КАК ВнутренняяОбработка
		|ИЗ
		|	РегистрСведений.wsОбработки КАК wsОбработки
		|ГДЕ
		|	wsОбработки.ТипСообщения = &ТипСообщения
		|	И wsОбработки.Направление = &Направление";
	
	Запрос.УстановитьПараметр("ТипСообщения", ТипСообщения);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Если ВыборкаДетальныеЗаписи.ВнутренняяОбработка Тогда
		ИмяОбработки = СтрЗаменить(ВыборкаДетальныеЗаписи.ИмяОбработки, " ", "");
		НайденнаяОбработка = Метаданные.Обработки.Найти(ИмяОбработки);
		Если НЕ НайденнаяОбработка = Неопределено Тогда
			Возврат Обработки[ИмяОбработки];
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Отладка Тогда
		Возврат ПолучитьОбработкуДляОтладки(ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.КаталогОтладки);
	Иначе 
		Возврат ПолучитьОбработку(ВыборкаДетальныеЗаписи.ИмяОбработки, ВыборкаДетальныеЗаписи.ХранилищеОбработки);			
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбработку(Знач ИмяОбработки, Знач ХранилищеОбработки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяОбработки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
	
	БылБезопасныйРежим = Ложь;
	Если БезопасныйРежим() Тогда
		УстановитьБезопасныйРежим(Ложь);
		БылБезопасныйРежим = Истина;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаОбработки);
	
	Если Не Файл.Существует() Тогда
		Если НЕ ИзвлечьИзРепозитория(ИмяОбработки, ХранилищеОбработки) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
	Защита.ПредупреждатьОбОпасныхДействиях = Ложь;

	Если БылБезопасныйРежим Тогда
		УстановитьБезопасныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьОбработкуДляОтладки(Знач ИмяОбработки, Знач КаталогОтладки)	
	Если Не ЗначениеЗаполнено(ИмяОбработки) или Не ЗначениеЗаполнено(КаталогОтладки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки, КаталогОтладки);
	Если ИмяФайлаОбработки = Неопределено Тогда
		wsЛоги.СообщитьОбОшибке("Что-то пошло не так");
		Возврат Неопределено
	КонецЕсли;
	Попытка
		Файл = Новый Файл(ИмяФайлаОбработки);
		Если Не Файл.Существует() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Защита = Новый ОписаниеЗащитыОтОпасныхДействий;
		Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
		Обработка = ВнешниеОбработки.Создать(ИмяФайлаОбработки, Ложь, Защита);
		Возврат Обработка;
	Исключение
		wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;		
КонецФункции

Функция ПроверитьПутьКФайлу(КаталогОбработки, ИмяОбработки)
	КаталогОбработки = СтрЗаменить(КаталогОбработки, "/", "\");
	Если Не Прав(КаталогОбработки, 1) = "\" Тогда
		КаталогОбработки = КаталогОбработки + "\";
	КонецЕсли;
	Если Не Прав(НРег(ИмяОбработки), 4) = ".epf" Тогда
		ИмяОбработки = СтрЗаменить(ИмяОбработки, ".epf","");
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ИзвлечьИзРепозитория(ИмяОбработки, ХранилищеОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ХранилищеОбработки = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	wsОбработки.ХранилищеОбработки КАК ХранилищеОбработки
		|ИЗ
		|	РегистрСведений.wsОбработки КАК wsОбработки
		|ГДЕ
		|	wsОбработки.ИмяОбработки = &ИмяОбработки";
		Запрос.УстановитьПараметр("ИмяОбработки", ИмяОбработки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДвоичныеДанные = Выборка.ХранилищеОбработки.Получить();
		КонецЕсли;
	Иначе 
		ДвоичныеДанные = ХранилищеОбработки.Получить();
	КонецЕсли; 
	Попытка
		СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки);
	Исключение
		wsЛоги.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

Функция СохранитьОбработкуНаДиск(ДвоичныеДанные, ИмяОбработки)
	Если Не ДвоичныеДанные = Неопределено Тогда
		ИмяФайлаОбработки = ПолучитьИмяФайлаОбработки(ИмяОбработки);
		ДвоичныеДанные.Записать(ИмяФайлаОбработки);
		Возврат Истина;
	Иначе
		ВызватьИсключение "Данные обработчика с именем " + ИмяОбработки + " отсутствуют в хранилище";	
	КонецЕсли;	
КонецФункции

Процедура ОчисткаСообщений() Экспорт
	
	// пока так, удаляем записи старше года
	Месяц = НачалоМесяца(ТекущаяДата() - 365 * 86400);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	wsОчередьСообщений.Месяц КАК Месяц
		|ИЗ
		|	РегистрСведений.wsОчередьСообщений КАК wsОчередьСообщений
		|ГДЕ
		|	wsОчередьСообщений.Месяц <= &Месяц";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.wsОчередьСообщений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаДетальныеЗаписи.Месяц);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

Функция СериализоватьОбъект(Значение) Экспорт
		
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение);
	СтрокаXML = ЗаписьXML.Закрыть();	
	
	Возврат СтрокаXML;
	
КонецФункции 

Функция ДеСериализоватьОбъект(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Попытка
		Значение = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции 


#КонецОбласти

Функция НайтиСоздатьТипСообщения(Наименование) Экспорт
	НайденныйТип = Справочники.wsТипыСообщений.НайтиПоНаименованию(Наименование);
	Если НЕ ЗначениеЗаполнено(НайденныйТип) Тогда
		Нов = Справочники.wsТипыСообщений.СоздатьЭлемент();
		Нов.Наименование = Наименование;
		Нов.Записать();
		НайденныйТип = Нов.Ссылка;
	КонецЕсли; 
	Возврат НайденныйТип;
КонецФункции // ()
 